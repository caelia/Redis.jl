function connect()
function prepare_bulk_string(prev::String, word::Any)
function prepare_command(words::Array)
function parse_error(chr::Char)
function read_array(conn::RSocket)
function read_error(conn::RSocket)
function read_simple_string(conn::RSocket)
function read_int(conn::RSocket)
function read_bulk_string(conn::RSocket)
function read_dispatch(conn)
function redis_command(conn::RSocket, cmd::String, args::Array)
function redis_command(conn::RSocket, cmd::String)
function auth(conn::RSocket, password::String)
function echo(conn::RSocket, message::String)
function ping(conn::RSocket)
function quit(conn::RSocket)
function select(conn::RSocket, dbid::Integer)
function bgrewriteaof(conn::RSocket)
function bgsave(conn::RSocket)
#function client_kill(conn::RSocket)
function client_list(conn::RSocket)
function client_getname(conn::RSocket)
function client_pause(conn::RSocket, timeout::Integer)
function client_setname(conn::RSocket, name::String)
function cluster_slots(conn::RSocket)
function command(conn::RSocket)
function command_count(conn::RSocket)
#function command_getkeys(conn::RSocket)
function command_info(conn::RSocket, names...)
function config_get(conn::RSocket, param::String="*")
function config_rewrite(conn::RSocket)
function config_set(conn::RSocket, param::String, value::String)
function config_resetstat(conn::RSocket)
function dbsize(conn::RSocket)
function debug_object(conn::RSocket, key::String)
function debug_segfault(conn::RSocket)
function flushall(conn::RSocket)
function flushdb(conn::RSocket)
function info(conn::RSocket, section::String)
function lastsave(conn::RSocket)
function monitor(conn::RSocket)
function role(conn::RSocket)
function save(conn::RSocket)
function shutdown(conn::RSocket, save::Bool)
function shutdown(conn::RSocket)
function slaveof(conn::RSocket, host::String, port::Integer)
function slaveof(conn::RSocket, noone::Nothing)
# function slowlog(conn::RSocket)
function sync(conn::RSocket)
function time(conn::RSocket)
function del(conn::RSocket, key...)
function dump(conn::RSocket, key::String)
function exists(conn::RSocket, key::String)
function expire(conn::RSocket, key::String, ttl::Integer)
function expireat(conn::RSocket, key::String, time::Integer)
function keys(conn::RSocket, pattern::String="*")
#function migrate(conn::RSocket)
function move(conn::RSocket, key::String, db::Integer)
#function object(conn::RSocket)
function persist(conn::RSocket, key::String)
function pexpire(conn::RSocket, key::String, ttl::Integer)
function pexpireat(conn::RSocket, key::String, time::Integer)
function pttl(conn::RSocket, key::String)
function randomkey(conn::RSocket)
function rename(conn::RSocket, key::String, newname::String)
function renamenx(conn::RSocket, key::String, newname::String)
function restore(conn::RSocket, key::String, value::String)
function restore(conn::RSocket, key::String, ttl::Integer, value::String)
#function sort(conn::RSocket)
function ttl(conn::RSocket, key::String)
function value_type(conn::RSocket, key::String)
#function scan(conn::RSocket)
function append(conn::RSocket, key::String, value::String)
function bitcount(conn::RSocket, key::String, start::Integer, end_::Integer)
function bitcount(conn::RSocket, key::String)
function bitop(conn::RSocket, op::BitOp, destkey::String, srckey::String, srckeys...)
function bitpos(conn::RSocket, key::String, value::Bool, start::Integer, end_::Integer)
function bitpos(conn::RSocket, key::String, value::Bool, start::Integer)
function bitpos(conn::RSocket, key::String, value::Bool)
function decr(conn::RSocket, key::String)
function decrby(conn::RSocket, key::String, n::Integer)
function get(conn::RSocket, key::String)
function getbit(conn::RSocket, key::String, offset::Integer)
function getrange(conn::RSocket, key::String, start::Integer, end_::Integer)
function getset(conn::RSocket, key::String, value::String)
function incr(conn::RSocket, key::String)
function incrby(conn::RSocket, key::String, n::Integer)
function incrbyfloat(conn::RSocket, key::String, x::FloatingPoint)
function mget(conn::RSocket, key::String, keys...)
function mset(conn::RSocket, key::String, val::String)
function mset{T<:String}(conn::RSocket, kkvv::Array{(T, T)})
function mset(conn::RSocket, key::String, val::String)
function msetnx{T<:String}(conn::RSocket, kkvv::Array{(T, T)})
function psetex(conn::RSocket, key::String, ms::Integer, value::String)
function set(conn::RSocket, key::String, value::String)
function set(conn::RSocket, key::String, value::String,
function set(conn::RSocket, key::String, value::String, expires::Integer, unit::Bool)
function set(conn::RSocket, key::String, value::String, condition::Bool)
function setbit(conn::RSocket, key::String, offset::Integer, value::Bool)
function setex(conn::RSocket, key::String, sec::Integer, value::String)
function setnx(conn::RSocket, key::String, value::String)
function setrange(conn::RSocket, key::String, offset::Integer, value::String)
function strlen(conn::RSocket, key::String)
function hdel(conn::RSocket, key::String, field::String, fields...)
function hexists(conn::RSocket, key::String, field::String)
function hget(conn::RSocket, key::String, field::String)
function hgetall(conn::RSocket, key::String)
function hincrby(conn::RSocket, key::String, field::String, incr::Integer)
function hincrbyfloat(conn::RSocket, key::String, field::String, incr::FloatingPoint)
function hkeys(conn::RSocket, key::String)
function hlen(conn::RSocket, key::String)
function hmget(conn::RSocket, key::String, field::String, fields...)
function hmset(conn::RSocket, key::String, field::String, val::String)
function hmset{T<:String}(conn::RSocket, key::String, ffvv::Array{(T, T)})
function hset(conn::RSocket, key::String, field::String, value::String)
function hsetnx(conn::RSocket, key::String, field::String, value::String)
function hvals(conn::RSocket, key::String)
function hscan(conn::RSocket, key::String, cursor::Integer)
function hscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
function hscan(conn::RSocket, key::String, cursor::Integer, match::String)
function hscan(conn::RSocket, key::String, cursor::Integer, count::Integer)
function blpop(conn::RSocket, key::String)
function blpop{T<:String}(conn::RSocket, keys::Array{T})
function brpop(conn::RSocket, key::String, timeout::Integer)
function brpop{T<:String}(conn::RSocket, keys::Array{T}, timeout::Integer)
function brpoplpush(conn::RSocket, src::String, dest::String, timeout::Integer)
function lindex(conn::RSocket, key::String, index::Integer)
function linsert(conn::RSocket, key::String, rel::Bool, pivot::String, value::String)
function llen(conn::RSocket, key::String)
function lpop(conn::RSocket, key::String)
function lpush(conn::RSocket, key::String, value::String)
function lpush{T<:String}(conn::RSocket, key::String, values::Array{T})
function lpushx(conn::RSocket, key::String, value::String)
function lpushx{T<:String}(conn::RSocket, key::String, values::Array{T})
function lrange(conn::RSocket, key::String, start::Integer, end_::Integer)
function lrem(conn::RSocket, key::String, count::Integer, value::String)
function lset(conn::RSocket, key::String, index::Integer, value::String)
function ltrim(conn::RSocket, key::String, start::Integer, end_::Integer)
function rpop(conn::RSocket, key::String)
function rpoplpush(conn::RSocket, src::String, dest::String)
function rpush(conn::RSocket, key::String, value::String)
function rpush{T<:String}(conn::RSocket, key::String, values::Array{T})
function rpushx(conn::RSocket, key::String, value::String)
function sadd(conn::RSocket, key::String, member::String)
function sadd{T<:String}(conn::RSocket, key::String, members::Array{T})
function scard(conn::RSocket, key::String)
function sdiff(conn::RSocket, key::String)
function sdiff{T<:String}(conn::RSocket, keys::Array{T})
function sdiffstore(conn::RSocket, dest::String, key::String)
function sdiffstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
function sinter(conn::RSocket, key::String)
function sinter{T<:String}(conn::RSocket, keys::Array{T})
function sinterstore(conn::RSocket, dest::String, key::String)
function sinterstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
function sismember(conn::RSocket, key::String, member::String)
function smembers(conn::RSocket, key::String)
function smove(conn::RSocket, src::String, dest::String, member::String)
function spop(conn::RSocket, key::String)
function srandmember(conn::RSocket, key::String, count::Integer)
function srandmember(conn::RSocket, key::String)
function srem(conn::RSocket, key::String, member::String)
function srem{T<:String}(conn::RSocket, key::String, members::Array{T})
function sunion(conn::RSocket, key::String)
function sunion{T<:String}(conn::RSocket, keys::Array{T})
function sunionstore(conn::RSocket, dest::String, key::String)
function sunionstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
function sscan(conn::RSocket, key::String, cursor::Integer)
function sscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
function sscan(conn::RSocket, key::String, cursor::Integer, match::String)
function sscan(conn::RSocket, key::String, cursor::Integer, count::Integer)
function zadd(conn::RSocket, key::String, score::Integer, member::String)
function zadd(conn::RSocket, key::String, ssmm::Array{(Integer, String)})
function zcard(conn::RSocket, key::String)
function zcount(conn::RSocket, key::String, min::Integer, max::Integer)
function zincrby(conn::RSocket, key::String, incr::Integer, member::String)
#function zinterstore(conn::RSocket)
#function zlexcount(conn::RSocket, key::String, min::Integer, max::Integer)
function zrange(conn::RSocket, key::String, start::Integer, end_::Integer,
#function zrangebylex(conn::RSocket, key::String)
#function zrevrangebylex(conn::RSocket, key::String)
#function zrangebyscore(conn::RSocket, key::String)
function zrank(conn::RSocket, key::String, member::String)
function zrem(conn::RSocket, key::String, member::String)
function zrem{T<:String}(conn::RSocket, key::String, members::Array{T})
#function zremrangebylex(conn::RSocket, key::String)
function zremrangebyrank(conn::RSocket, key::String, start::Integer, end_::Integer)
function zremrangebyscore(conn::RSocket, key::String, min::Integer, max::Integer)
function zrevrange(conn::RSocket, key::String, start::Integer, end_::Integer,
#function zrevrangebyscore(conn::RSocket, key::String)
function zrevrank(conn::RSocket, key::String, member::String)
function zscore(conn::RSocket, key::String, member::String)
#function zunionstore(conn::RSocket)
function zscan(conn::RSocket, key::String, cursor::Integer)
function zscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
function zscan(conn::RSocket, key::String, cursor::Integer, match::String)
function zscan(conn::RSocket, key::String, cursor::Integer, count::Integer)
function pfadd(conn::RSocket, key::String, element::String)
function pfadd{T<:String}(conn::RSocket, key::String, elements::Array{T})
function pfcount(conn::RSocket, key::String)
function pfcount{T<:String}(conn::RSocket, keys::Array{T})
function pfmerge(conn::RSocket, dest::String, src::String)
function pfmerge{T<:String}(conn::RSocket, dest::String, srcs::Array{T})
function psubscribe(conn::RSocket, pattern::String)
function psubscribe{T<:String}(conn::RSocket, patterns::Array{T})
function pubsub_channels(conn::RSocket, pattern::String)
function pubsub_channels(conn::RSocket)
function pubsub_numsub(conn::RSocket, channel::String)
function pubsub_numsub{T<:String}(conn::RSocket, channels::Array{T})
function pubsub_numpat(conn::RSocket)
function publish(conn::RSocket, channel::String, message::String)
function punsubscribe(conn::RSocket)
function punsubscribe(conn::RSocket, pattern::String)
function punsubscribe{T<:String}(conn::RSocket, patterns::Array{T})
function subscribe(conn::RSocket, channel::String)
function subscribe{T<:String}(conn::RSocket, channels::Array{T})
function unsubscribe(conn::RSocket)
function unsubscribe(conn::RSocket, pattern::String)
function unsubscribe{T<:String}(conn::RSocket, patterns::Array{T})
function discard(conn::RSocket)
function exec(conn::RSocket)
function multi(conn::RSocket)
function unwatch(conn::RSocket)
function watch(conn::RSocket, key::String)
function watch{T<:String}(conn::RSocket, keys::Array{T})
# function eval(conn::RSocket)
# function evalsha(conn::RSocket)
# function script_exists(conn::RSocket)
# function script_flush(conn::RSocket)
# function script_kill(conn::RSocket)
# function script_load(conn::RSocket)
