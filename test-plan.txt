# \\  Connection  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
O auth(conn::RSocket, password::String)
O echo(conn::RSocket, message::String)
O ping(conn::RSocket)
O quit(conn::RSocket)
O select(conn::RSocket, dbid::Integer)

# \\  Server  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- bgrewriteaof(conn::RSocket)
- bgsave(conn::RSocket)
- client_kill(conn::RSocket)
- client_list(conn::RSocket)
- client_getname(conn::RSocket)
- client_pause(conn::RSocket, timeout::Integer)
- client_setname(conn::RSocket, name::String)
- cluster_slots(conn::RSocket)
- command(conn::RSocket)
- command_count(conn::RSocket)
- command_getkeys(conn::RSocket)
- command_info(conn::RSocket, names...)
- config_get(conn::RSocket, param::String="*")
- config_rewrite(conn::RSocket)
- config_set(conn::RSocket, param::String, value::String)
- config_resetstat(conn::RSocket)
O dbsize(conn::RSocket)
- debug_object(conn::RSocket, key::String)
x debug_segfault(conn::RSocket)
- flushall(conn::RSocket)
O flushdb(conn::RSocket)
- info(conn::RSocket, section::String)
- lastsave(conn::RSocket)
- monitor(conn::RSocket)
- role(conn::RSocket)
- save(conn::RSocket)
- shutdown(conn::RSocket, save::Bool)
O shutdown(conn::RSocket)
- slaveof(conn::RSocket, host::String, port::Integer)
- slaveof(conn::RSocket, noone::Nothing)
- slowlog(conn::RSocket)
- sync(conn::RSocket)
- time(conn::RSocket)

# \\  Keys  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- del(conn::RSocket, key...)
- dump(conn::RSocket, key::String)
- exists(conn::RSocket, key::String)
- expire(conn::RSocket, key::String, ttl::Integer)
- expireat(conn::RSocket, key::String, time::Integer)
/ keys(conn::RSocket, pattern::String="*")
- migrate(conn::RSocket)
- move(conn::RSocket, key::String, db::Integer)
- object(conn::RSocket)
- persist(conn::RSocket, key::String)
- pexpire(conn::RSocket, key::String, ttl::Integer)
- pexpireat(conn::RSocket, key::String, time::Integer)
- pttl(conn::RSocket, key::String)
- randomkey(conn::RSocket)
- rename(conn::RSocket, key::String, newname::String)
- renamenx(conn::RSocket, key::String, newname::String)
- restore(conn::RSocket, key::String, value::String)
- restore(conn::RSocket, key::String, ttl::Integer, value::String)
- sort(conn::RSocket)
- ttl(conn::RSocket, key::String)
- value_type(conn::RSocket, key::String)
- scan(conn::RSocket)

# \\  Strings  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- append(conn::RSocket, key::String, value::String)
- bitcount(conn::RSocket, key::String, start::Integer, end_::Integer)
- bitcount(conn::RSocket, key::String)
- bitop(conn::RSocket, op::BitOp, destkey::String, srckey::String, srckeys...)
- bitpos(conn::RSocket, key::String, value::Bool, start::Integer, end_::Integer)
- bitpos(conn::RSocket, key::String, value::Bool, start::Integer)
- bitpos(conn::RSocket, key::String, value::Bool)
- decr(conn::RSocket, key::String)
- decrby(conn::RSocket, key::String, n::Integer)
O get(conn::RSocket, key::String)
- getbit(conn::RSocket, key::String, offset::Integer)
- getrange(conn::RSocket, key::String, start::Integer, end_::Integer)
- getset(conn::RSocket, key::String, value::String)
- incr(conn::RSocket, key::String)
- incrby(conn::RSocket, key::String, n::Integer)
- incrbyfloat(conn::RSocket, key::String, x::FloatingPoint)
- mget(conn::RSocket, key::String, keys...)
- mset(conn::RSocket, key::String, val::String)
- mset{T<:String}(conn::RSocket, kkvv::Array{(T, T)})
- mset(conn::RSocket, key::String, val::String)
- msetnx{T<:String}(conn::RSocket, kkvv::Array{(T, T)})
- psetex(conn::RSocket, key::String, ms::Integer, value::String)
O set(conn::RSocket, key::String, value::String)
- set(conn::RSocket, key::String, value::String, expires::Integer,
    unit::Bool, condition::Bool)
- set(conn::RSocket, key::String, value::String, expires::Integer, unit::Bool)
- set(conn::RSocket, key::String, value::String, condition::Bool)
- setbit(conn::RSocket, key::String, offset::Integer, value::Bool)
- setex(conn::RSocket, key::String, sec::Integer, value::String)
- setnx(conn::RSocket, key::String, value::String)
- setrange(conn::RSocket, key::String, offset::Integer, value::String)
- strlen(conn::RSocket, key::String)

# \\  Hashes  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- hdel(conn::RSocket, key::String, field::String, fields...)
- hexists(conn::RSocket, key::String, field::String)
- hget(conn::RSocket, key::String, field::String)
- hgetall(conn::RSocket, key::String)
- hincrby(conn::RSocket, key::String, field::String, incr::Integer)
- hincrbyfloat(conn::RSocket, key::String, field::String, incr::FloatingPoint)
- hkeys(conn::RSocket, key::String)
- hlen(conn::RSocket, key::String)
- hmget(conn::RSocket, key::String, field::String, fields...)
- hmset(conn::RSocket, key::String, field::String, val::String)
- hmset{T<:String}(conn::RSocket, key::String, ffvv::Array{(T, T)})
- hset(conn::RSocket, key::String, field::String, value::String)
- hsetnx(conn::RSocket, key::String, field::String, value::String)
- hvals(conn::RSocket, key::String)
- hscan(conn::RSocket, key::String, cursor::Integer)
- hscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
- hscan(conn::RSocket, key::String, cursor::Integer, match::String)
- hscan(conn::RSocket, key::String, cursor::Integer, count::Integer)

# \\  Lists  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- blpop(conn::RSocket, key::String)
- blpop{T<:String}(conn::RSocket, keys::Array{T})
- brpop(conn::RSocket, key::String, timeout::Integer)
- brpop{T<:String}(conn::RSocket, keys::Array{T}, timeout::Integer)
- brpoplpush(conn::RSocket, src::String, dest::String, timeout::Integer)
- lindex(conn::RSocket, key::String, index::Integer)
- linsert(conn::RSocket, key::String, rel::Bool, pivot::String, value::String)
- llen(conn::RSocket, key::String)
- lpop(conn::RSocket, key::String)
- lpush(conn::RSocket, key::String, value::String)
- lpush{T<:String}(conn::RSocket, key::String, values::Array{T})
- lpushx(conn::RSocket, key::String, value::String)
- lpushx{T<:String}(conn::RSocket, key::String, values::Array{T})
- lrange(conn::RSocket, key::String, start::Integer, end_::Integer)
- lrem(conn::RSocket, key::String, count::Integer, value::String)
- lset(conn::RSocket, key::String, index::Integer, value::String)
- ltrim(conn::RSocket, key::String, start::Integer, end_::Integer)
- rpop(conn::RSocket, key::String)
- rpoplpush(conn::RSocket, src::String, dest::String)
- rpush(conn::RSocket, key::String, value::String)
- rpush{T<:String}(conn::RSocket, key::String, values::Array{T})
- rpushx(conn::RSocket, key::String, value::String)

# \\  Sets  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- sadd(conn::RSocket, key::String, member::String)
- sadd{T<:String}(conn::RSocket, key::String, members::Array{T})
- scard(conn::RSocket, key::String)
- sdiff(conn::RSocket, key::String)
- sdiff{T<:String}(conn::RSocket, keys::Array{T})
- sdiffstore(conn::RSocket, dest::String, key::String)
- sdiffstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
- sinter(conn::RSocket, key::String)
- sinter{T<:String}(conn::RSocket, keys::Array{T})
- sinterstore(conn::RSocket, dest::String, key::String)
- sinterstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
- sismember(conn::RSocket, key::String, member::String)
- smembers(conn::RSocket, key::String)
- smove(conn::RSocket, src::String, dest::String, member::String)
- spop(conn::RSocket, key::String)
- srandmember(conn::RSocket, key::String, count::Integer)
- srandmember(conn::RSocket, key::String)
- srem(conn::RSocket, key::String, member::String)
- srem{T<:String}(conn::RSocket, key::String, members::Array{T})
- sunion(conn::RSocket, key::String)
- sunion{T<:String}(conn::RSocket, keys::Array{T})
- sunionstore(conn::RSocket, dest::String, key::String)
- sunionstore{T<:String}(conn::RSocket, dest::String, keys::Array{T})
- sscan(conn::RSocket, key::String, cursor::Integer)
- sscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
- sscan(conn::RSocket, key::String, cursor::Integer, match::String)
- sscan(conn::RSocket, key::String, cursor::Integer, count::Integer)

# \\  Sorted Sets  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- zadd(conn::RSocket, key::String, score::Integer, member::String)
- zadd(conn::RSocket, key::String, ssmm::Array{(Integer, String)})
- zcard(conn::RSocket, key::String)
- zcount(conn::RSocket, key::String, min::Integer, max::Integer)
- zincrby(conn::RSocket, key::String, incr::Integer, member::String)
- zinterstore(conn::RSocket)
- zlexcount(conn::RSocket, key::String, min::Integer, max::Integer)
- zrange(conn::RSocket, key::String, start::Integer, end_::Integer,
- zrangebylex(conn::RSocket, key::String)
- zrevrangebylex(conn::RSocket, key::String)
- zrangebyscore(conn::RSocket, key::String)
- zrank(conn::RSocket, key::String, member::String)
- zrem(conn::RSocket, key::String, member::String)
- zrem{T<:String}(conn::RSocket, key::String, members::Array{T})
- zremrangebylex(conn::RSocket, key::String)
- zremrangebyrank(conn::RSocket, key::String, start::Integer, end_::Integer)
- zremrangebyscore(conn::RSocket, key::String, min::Integer, max::Integer)
- zrevrange(conn::RSocket, key::String, start::Integer, end_::Integer,
- zrevrangebyscore(conn::RSocket, key::String)
- zrevrank(conn::RSocket, key::String, member::String)
- zscore(conn::RSocket, key::String, member::String)
- zunionstore(conn::RSocket)
- zscan(conn::RSocket, key::String, cursor::Integer)
- zscan(conn::RSocket, key::String, cursor::Integer, match::String, count::Integer)
- zscan(conn::RSocket, key::String, cursor::Integer, match::String)
- zscan(conn::RSocket, key::String, cursor::Integer, count::Integer)

# \\  HyperLogLog  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- pfadd(conn::RSocket, key::String, element::String)
- pfadd{T<:String}(conn::RSocket, key::String, elements::Array{T})
- pfcount(conn::RSocket, key::String)
- pfcount{T<:String}(conn::RSocket, keys::Array{T})
- pfmerge(conn::RSocket, dest::String, src::String)
- pfmerge{T<:String}(conn::RSocket, dest::String, srcs::Array{T})

# \\  Pub/Sub  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- psubscribe(conn::RSocket, pattern::String)
- psubscribe{T<:String}(conn::RSocket, patterns::Array{T})
- pubsub_channels(conn::RSocket, pattern::String)
- pubsub_channels(conn::RSocket)
- pubsub_numsub(conn::RSocket, channel::String)
- pubsub_numsub{T<:String}(conn::RSocket, channels::Array{T})
- pubsub_numpat(conn::RSocket)
- publish(conn::RSocket, channel::String, message::String)
- punsubscribe(conn::RSocket)
- punsubscribe(conn::RSocket, pattern::String)
- punsubscribe{T<:String}(conn::RSocket, patterns::Array{T})
- subscribe(conn::RSocket, channel::String)
- subscribe{T<:String}(conn::RSocket, channels::Array{T})
- unsubscribe(conn::RSocket)
- unsubscribe(conn::RSocket, pattern::String)
- unsubscribe{T<:String}(conn::RSocket, patterns::Array{T})

# \\  Transactions  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- discard(conn::RSocket)
- exec(conn::RSocket)
- multi(conn::RSocket)
- unwatch(conn::RSocket)
- watch(conn::RSocket, key::String)
- watch{T<:String}(conn::RSocket, keys::Array{T})

# \\  Scripting  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
- eval(conn::RSocket)
- evalsha(conn::RSocket)
- script_exists(conn::RSocket)
- script_flush(conn::RSocket)
- script_kill(conn::RSocket)
- script_load(conn::RSocket)

